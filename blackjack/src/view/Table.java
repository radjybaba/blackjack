/*
 * 
 * 	Nadine Smair		308573252			Anton Anton		203323902
 *	Ameer Dow			203844956			Geryes Moussa 	301622635
 *
 *
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;


import AppPackage.AnimationClass;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;
import model.Card;
import model.Round.Winner;
import static model.Round.Winner.Dealer;
import static model.Round.Winner.Player;
import static model.Round.Winner.noOne;



public class Table extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Creates new form Table
	 */
	static ViewLogic view;

	private static WelcomeScreen welcome;

	private final ArrayList<JLabel> playerHand;     // Player's hand- the cards
	private final ArrayList<JLabel> dealerHand;     // Dealer's hand- the cards

	private int playerCards;
	private int dealerCards;

	private JLabel back;
	private String winner;
	private Winner win;

	private JLabel animated;
	private Timer time;

	private String username;



	/*
	 * the table constructor 
	 */
	public Table(ViewLogic v , WelcomeScreen screen , String usr) {
		initComponents();
		add(background);
		view = v;
		welcome = screen;
		win = noOne;
		playerCards = 0;
		dealerCards = 0;
		playerHand = new ArrayList<>();
		dealerHand = new ArrayList<>();
		this.time = new Timer(1,null);
		playerScore.setText( "0" );
		dealerScore.setText( "0" );
		currWinsText.setText( "0" );
		currRoundText.setText( "0" );
		currScoreText.setText( "0" );
		statusMsg.setText("");
		this.username = usr;
		usernameText.setText(usr);
		buttonsControl(true,false,false);

		try {
			view.shuffleSound();
		} catch (LineUnavailableException ex) {
			Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
		}
		initAnimatedCard();
		this.repaint();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		HitButton = new javax.swing.JButton();
		newRoundButton = new javax.swing.JButton();
		StandButton = new javax.swing.JButton();
		playerScore = new javax.swing.JLabel();
		statusMsg = new javax.swing.JLabel();
		logoutButton = new javax.swing.JButton();
		dealerScoreText = new javax.swing.JLabel();
		dealerScore = new javax.swing.JLabel();
		playerScoreText = new javax.swing.JLabel();
		currWinsText = new javax.swing.JLabel();
		currRoundText = new javax.swing.JLabel();
		currScoreText = new javax.swing.JLabel();
		usernameText = new javax.swing.JLabel();
		newGameButton = new javax.swing.JButton();
		background = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setMaximumSize(new java.awt.Dimension(1280, 720));
		setPreferredSize(new java.awt.Dimension(1280, 720));
		setResizable(false);
		getContentPane().setLayout(null);

		HitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/buttons/hit_button.png"))); // NOI18N
		HitButton.setBorderPainted(false);
		HitButton.setContentAreaFilled(false);
		HitButton.setFocusPainted(false);
		HitButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				HitButtonActionPerformed(evt);
			}
		});
		getContentPane().add(HitButton);
		HitButton.setBounds(990, 520, 80, 90);

		newRoundButton.setForeground(new java.awt.Color(240, 240, 240));
		newRoundButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/buttons/new_round.png"))); // NOI18N
		newRoundButton.setBorderPainted(false);
		newRoundButton.setContentAreaFilled(false);
		newRoundButton.setFocusPainted(false);
		newRoundButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				newRoundButtonActionPerformed(evt);
			}
		});
		getContentPane().add(newRoundButton);
		newRoundButton.setBounds(1050, 630, 211, 44);

		StandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/buttons/stand_button.png"))); // NOI18N
		StandButton.setBorderPainted(false);
		StandButton.setContentAreaFilled(false);
		StandButton.setFocusPainted(false);
		StandButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				StandButtonActionPerformed(evt);
			}
		});
		getContentPane().add(StandButton);
		StandButton.setBounds(1090, 470, 80, 90);

		playerScore.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
		playerScore.setForeground(new java.awt.Color(255, 255, 0));
		playerScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		playerScore.setText("21");
		getContentPane().add(playerScore);
		playerScore.setBounds(600, 530, 90, 40);

		statusMsg.setFont(new java.awt.Font("Tempus Sans ITC", 1, 36)); // NOI18N
		statusMsg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		statusMsg.setText("msg");
		getContentPane().add(statusMsg);
		statusMsg.setBounds(250, 290, 250, 60);

		logoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/buttons/logoutButton.png"))); // NOI18N
		logoutButton.setBorderPainted(false);
		logoutButton.setContentAreaFilled(false);
		logoutButton.setFocusPainted(false);
		logoutButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				logoutButtonActionPerformed(evt);
			}
		});
		getContentPane().add(logoutButton);
		logoutButton.setBounds(10, 20, 104, 36);

		dealerScoreText.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
		dealerScoreText.setForeground(new java.awt.Color(255, 255, 0));
		dealerScoreText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		dealerScoreText.setText("Dealer's round score:");
		getContentPane().add(dealerScoreText);
		dealerScoreText.setBounds(260, 100, 170, 40);

		dealerScore.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
		dealerScore.setForeground(new java.awt.Color(255, 255, 0));
		dealerScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		dealerScore.setText("21");
		getContentPane().add(dealerScore);
		dealerScore.setBounds(410, 100, 80, 40);

		playerScoreText.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
		playerScoreText.setForeground(new java.awt.Color(255, 255, 0));
		playerScoreText.setText("Player's round score:");
		getContentPane().add(playerScoreText);
		playerScoreText.setBounds(450, 520, 150, 19);

		currWinsText.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
		currWinsText.setForeground(new java.awt.Color(255, 255, 255));
		currWinsText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		currWinsText.setText("wins");
		getContentPane().add(currWinsText);
		currWinsText.setBounds(120, 600, 60, 30);

		currRoundText.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
		currRoundText.setForeground(new java.awt.Color(255, 255, 255));
		currRoundText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		currRoundText.setText("total rounds");
		getContentPane().add(currRoundText);
		currRoundText.setBounds(210, 600, 60, 30);

		currScoreText.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
		currScoreText.setForeground(new java.awt.Color(255, 255, 255));
		currScoreText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		currScoreText.setText("score");
		getContentPane().add(currScoreText);
		currScoreText.setBounds(20, 600, 60, 30);

		usernameText.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
		usernameText.setForeground(new java.awt.Color(102, 102, 102));
		usernameText.setText("username");
		getContentPane().add(usernameText);
		usernameText.setBounds(90, 535, 220, 40);

		newGameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/buttons/new_game_button.png"))); // NOI18N
		newGameButton.setBorderPainted(false);
		newGameButton.setContentAreaFilled(false);
		newGameButton.setFocusPainted(false);
		newGameButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				newGameButtonActionPerformed(evt);
			}
		});
		getContentPane().add(newGameButton);
		newGameButton.setBounds(530, 620, 243, 52);

		background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/background.png"))); // NOI18N
		getContentPane().add(background);
		background.setBounds(0, 0, 1280, 720);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/*
	 * new round button
	 * resets the table, dealer and player hands
	 * and then deals 2 cards to the player and 2 to the dealer while updating the stats
	 */
	private void newRoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newRoundButtonActionPerformed
		background.removeAll();

		usernameText.setText(this.username);
		view.newRound();

		playerHand.clear();
		dealerHand.clear();
		playerCards = 0;
		dealerCards = 0;
		//    add(jLabel1);

		background.add(playerScore);
		background.add(dealerScore);
		background.add(dealerScoreText);
		background.add(playerScoreText);
		background.add(statusMsg);
		background.add(currWinsText);
		background.add(currRoundText);
		background.add(currScoreText);
		background.add(usernameText);
		background.add(animated);

		playerScore.setText( "0" );
		dealerScore.setText( "0" );

		statusMsg.setText("");

		playerScore.setForeground(Color.yellow);
		statusMsg.setForeground(Color.yellow);
		statusMsg.setText("");
		//playerScore.setText( "" + view.getPlayerCurrentScore() );
		dealerScore.setText( ""  );

		playerCurrentGameStats();
		buttonsControl(true,false,false);
		this.repaint();
		try {
			view.cardSound(0);
		} catch (LineUnavailableException ex) {
			Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
		}
		//1st player card animation
		playerAnimation();
		startDeal("player" , 670);

	}//GEN-LAST:event_newRoundButtonActionPerformed

	/*
	 * the stand button action and saves the user data
	 */
	private void StandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StandButtonActionPerformed
		HitButton.setEnabled(false);
		HitButton.setVisible(false);
		StandButton.setVisible(false);

		JLabel temp = dealerHand.get(1);
		back.setVisible(false);
		temp.setVisible(true);

		if(view.getPlayerCurrentScore() != 21){
			while(view.getDealerCurrentScore() < 17){
				view.stand();
				updateHand("dealer" , ++dealerCards);
			}
		}
		try {
			view.cardSound(dealerCards - 2);
		} catch (LineUnavailableException ex) {
			Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
		}
		/*
		 * soft hand check
		 */
		if(view.getDealerCurrentScore() == 17){
			if(view.getDealerHand().getNumOfAces()>1){
				System.out.println("Dealer hits soft 17!");
			}
		}
		dealerScore.setText("" + view.getDealerCurrentScore()  );
		win = view.whoWon();
		// stats update
		view.updatePlayersScore(win);
		view.saveData();
		winner = view.winnerToString(win);
		// wining msg
		//		System.err.println("hasWon inside stand: " + winner + " has Won!");
		statusMsgPicture();
		if(winner.equals("Player")){
			try {
				view.winningSound();
			} catch (LineUnavailableException ex) {
				Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
			}
			statusMsg.setText("You Won!");
		}else{
			try {
				view.losingSound();
			} catch (LineUnavailableException ex) {
				Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
			}
			statusMsg.setText("You Lost!");
		}

		/*************************************/
		this.repaint();
		buttonsControl(true,false,false);
	}//GEN-LAST:event_StandButtonActionPerformed

	/*
	 * hit button action
	 */
	private void HitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HitButtonActionPerformed
		try {
			view.cardSound(0);
		} catch (LineUnavailableException ex) {
			Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
		}

		view.hit();
		playerAnimation();
		delayedFunctionTask("player" , 670);

		/*
		 * check blackjack
		 *
		win = view.hasBlackJack();
		winner = view.winnerToString(win);
		System.err.println("hasblackjack inside hit: " + winner + " has Blackjack!");
		if(win != noOne && win == Player){
			jLabel3.setText(winner + " has Blackjack!");
			buttonsControl(false,false,true);
		}
		/*
		 * check busted
		 *
		win = view.hasBusted();
		winner = view.winnerToString(win);
		System.err.println("hasbusted inside hit: " + winner + " got busted!");
		if(win == Player){
			view.updatePlayersScore(Dealer);
			view.saveData();
			jLabel3.setText(winner + " got busted!");
			buttonsControl(true,false,false);
		}
		 */
		this.repaint();
	}//GEN-LAST:event_HitButtonActionPerformed

	/*
	 * logout button, returns to user stat panel and save stats too
	 */
	private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
		view.saveData();
		welcome.getJpanel2().setVisible(true);
		welcome.setVisible(true);
		dispose();
	}//GEN-LAST:event_logoutButtonActionPerformed

	/*
	 * new game button while in table playing game, resets the table and gives the player chance to start new game (also saves the previous user stats)
	 */
	private void newGameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameButtonActionPerformed
		background.removeAll();
		try {
			view.shuffleSound();
		} catch (LineUnavailableException ex) {
			Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
		}

		background.add(playerScore);
		background.add(dealerScore);
		background.add(dealerScoreText);
		background.add(playerScoreText);
		background.add(statusMsg);
		background.add(currWinsText);
		background.add(currRoundText);
		background.add(currScoreText);
		background.add(usernameText);
		statusMsg.setText("");
		playerScore.setText( "0" );
		dealerScore.setText( "0" );

		currScoreText.setText( "0" );
		currRoundText.setText( "0" );
		currWinsText.setText( "0" );
		view.saveData();
		repaint();
		buttonsControl(true, false, false);
		view.resetGame();
	}//GEN-LAST:event_newGameButtonActionPerformed

	/*
	 * function to update the dealer or player JLabel array to show the i-th card
	 */
	public void updateHand(String hand, int i){
		int j = i - 1;
		String path;
		//     System.out.println("updateHand: u r here: "+ i);
		JLabel temp = new JLabel();
		if(hand.contentEquals("player")){
			playerHand.add(temp);
			path = view.getImgPath(view.getPlayerHand(), j);
			//    System.out.println("player path: "+ path);
			ImageIcon cardIcon = new ImageIcon(getClass().getResource(path));
			temp.setIcon(cardIcon);
			fixCords(hand , i);
			temp.setVisible(true);
			background.add(temp);
			this.repaint();
		}else{
			dealerHand.add(temp);
			path = view.getImgPath(view.getDealerHand(), j);
			//      System.out.println("dealer path: "+ path);
			ImageIcon cardIcon = new ImageIcon(getClass().getResource(path));
			temp.setIcon(cardIcon);
			fixCords(hand , i);
			temp.setVisible(true);
			background.add(temp);
			this.repaint();
		}
	}

	/*
	 * fixes the cords of the cards on the table depending on how many cards are in the array
	 */
	public void fixCords(String hand , int i){
		if(hand.contentEquals("player")){
			for(int j = 0 ; j < i ; j++){
				JLabel temp = playerHand.get(j);
				int x = (1280 - i*66)/2 ; //the middle without the cards
				temp.setBounds(x + 66*j, 340, 60 , 87 );
				this.repaint();
			}
		}else{
			for(int j = 0 ; j < i ; j++){
				JLabel temp = dealerHand.get(j);
				int x = (1280 - i*66)/2;
				temp.setBounds(x + 66*j, 160, 60 , 87 );
				this.repaint();
			}  
		}
	}

	/*
	 * buttons control function to show and enable the main 3 buttons to help the player
	 */
	private void buttonsControl(boolean newRound, boolean hit , boolean stand){
		StandButton.setEnabled(stand);      //stand
		StandButton.setVisible(stand);
		HitButton.setEnabled(hit); //hit
		HitButton.setVisible(hit);
		newRoundButton.setEnabled(newRound); //new round
		newRoundButton.setVisible(newRound);
	}

	/*
	 * sets the player's stats on the screen
	 */
	private void playerCurrentGameStats(){
		currScoreText.setText( "" + view.getRoundsScore());
		currRoundText.setText( "" + view.getRoundsTotal());
		currWinsText.setText( "" + view.getRoundsWins());
	}


	/*
	 * in the next 2 functions we used an external jar for the animation
	 * check the java doc for the AnimationClass functions for further information
	 */

	/*
	 * the dealer's cards animation function
	 */
	private void dealerAnimation(){
		// takes 1000 ms

		JLabel temp = animated;
		animated.setBounds(930, 40, 60, 87);
		animated.setVisible(true);
		AnimationClass ac = new AnimationClass();
		ac.jLabelXLeft(930,620 , 20, 10, temp);   
		ac.jLabelYDown(40,160 , 20, 2, temp);
	}

	/*
	 * the player's cards animation function
	 */
	private void playerAnimation(){
		//takes 670 ms

		JLabel temp = animated;
		animated.setVisible(true);
		animated.setBounds(930, 40, 60, 87);
		AnimationClass ac = new AnimationClass();
		ac.jLabelXLeft(930, 620, 10, 10, temp);
		ac.jLabelYDown(40, 320, 10, 5, temp);
	}

	/*
	 * the card to deal initialize 
	 */
	private void initAnimatedCard(){
		this.animated = new JLabel();
		animated.setIcon(new ImageIcon(getClass().getResource("/view/cardsback.png")));
		animated.setBounds(930, 40, 60, 87);
		animated.setVisible(false);
		background.add(animated);
	}

	/*
	 * delayed function with task (updating the card on screen) after the animation is over
	 */
	private void delayedFunctionTask(String hand , int delay){
		final String temp = hand;
		ActionListener taskPerformer = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// the things to be delayed :D
				if(temp.equals("player")){
					updateHand("player" , ++playerCards);
					playerScore.setText( "" + view.getPlayerCurrentScore() );
					/*
					 * check blackjack
					 */
					win = view.hasBlackJack();
					winner = view.winnerToString(win);
					//		System.err.println("hasblackjack inside hit: " + winner + " has Blackjack!");
					if(win != noOne && win == Player){
						//	statusMsg.setText(winner + " has Blackjack!");
						buttonsControl(false,false,true);
					}
					/*
					 * check busted
					 */
					win = view.hasBusted();
					winner = view.winnerToString(win);
					//		System.err.println("hasbusted inside hit: " + winner + " got busted!");
					if(win == Player){
						win = Dealer;
						view.updatePlayersScore(Dealer);
						view.saveData();
						statusMsgPicture();
						statusMsg.setText("Busted!");
						try {
							view.losingSound();
						} catch (LineUnavailableException ex) {
							Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
						}
						buttonsControl(true,false,false);
					}

				}else{
					updateHand("dealer" , ++dealerCards);

				}
				animated.setVisible(false);
				time.stop();
				//	System.err.println("timer status is:" + time.isRunning() );
			}
		} ;
		time = new Timer(delay, taskPerformer);
		time.start();
	}

	/*
	 * the start deal function, shows the first 4 cards each one after its animation is done (recursive function)
	 */
	private void startDeal(String hand , int delay){
		final String temp = hand;
		ActionListener taskPerformer = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// the things to be delayed :D
				if(temp.equals("player")){
					updateHand("player" , ++playerCards);
				}else if (temp.equals("dealer")){
					updateHand("dealer" , ++dealerCards);
				}
				animated.setVisible(false);
				time.stop();
				//		System.err.println("timer status is:" + time.isRunning() );
				if(playerCards == 1){			//2nd player card
					try {
						view.cardSound(0);
					} catch (LineUnavailableException ex) {
						Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
					}
					playerAnimation();                                        
					startDeal("player" , 670);	
				}else if(dealerCards == 0){		//1st dealer card
					try {
						view.cardSound(0);
					} catch (LineUnavailableException ex) {
						Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
					}
					dealerAnimation();
					startDeal("dealer" , 1250);
				}else if(dealerCards == 1){		//2nd dealer card
					try {
						view.cardSound(0);
					} catch (LineUnavailableException ex) {
						Logger.getLogger(Table.class.getName()).log(Level.SEVERE, null, ex);
					}
					dealerAnimation();
					startDeal("dealer" , 1250);
				}else{							// things to be done after the 4 cards are shown on the screen
					playerScore.setText( "" + view.getPlayerCurrentScore() );
					win = view.hasBlackJack();
					//		winner = view.winnerToString(win);
					//		System.err.println(winner + " has Blackjack!");

					// 2nd card is hidden for the dealer
					back = new JLabel();
					JLabel temp = dealerHand.get(1);
					Rectangle r = temp.getBounds();
					String path = "cardsback.png";
					ImageIcon cardIcon = new ImageIcon(getClass().getResource(path));
					back.setBounds(r);
					back.setIcon(cardIcon);
					temp.add(back);
					temp.setVisible(false);
					back.setVisible(true);
					background.add(back);

					Card c = view.returnCard(view.getDealerHand(), 1);
					dealerScore.setText("" + (view.getDealerCurrentScore() - c.getValueAsInt())  );
					if( win == Player ){       //checks if the player has blackjack
						//				jLabel3.setText(winner + " has Blackjack!");
						buttonsControl(false,false,true);
					}else{
						buttonsControl(false,true,true);
					}
				}
			}
		} ;
		//670 1200
		time = new Timer(delay, taskPerformer);
		time.start();
	}


	/*
	 * building the winning or losing label
	 */

	private void statusMsgPicture(){
		JLabel winPic = new JLabel();
		String path = "animation/win.gif";
		ImageIcon winIcon = new ImageIcon(getClass().getResource(path));
		JLabel losePic = new JLabel();
		path = "animation/lose.gif";
		ImageIcon loseIcon = new ImageIcon(getClass().getResource(path));
		if(win == Player){
			winPic.setBounds(2,175,winIcon.getIconWidth() , winIcon.getIconHeight());
			winPic.setIcon(winIcon);
			background.add(winPic);
		}else{
			losePic.setBounds(2,175,loseIcon.getIconWidth() , loseIcon.getIconHeight());
			losePic.setIcon(loseIcon);
			background.add(losePic);
		}
	}








	/**
	 * @param args the command line arguments
	 */



	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton HitButton;
	private javax.swing.JButton StandButton;
	private javax.swing.JLabel background;
	private javax.swing.JLabel currRoundText;
	private javax.swing.JLabel currScoreText;
	private javax.swing.JLabel currWinsText;
	private javax.swing.JLabel dealerScore;
	private javax.swing.JLabel dealerScoreText;
	private javax.swing.JButton logoutButton;
	private javax.swing.JButton newGameButton;
	private javax.swing.JButton newRoundButton;
	private javax.swing.JLabel playerScore;
	private javax.swing.JLabel playerScoreText;
	private javax.swing.JLabel statusMsg;
	private javax.swing.JLabel usernameText;
	// End of variables declaration//GEN-END:variables
}
